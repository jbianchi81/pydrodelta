{
    "$id": "procedurefunction.json",
    "$schema":"https://json-schema.org/draft/2020-12/schema",
    "title": "ProcedureFunction",
    "type": "object",
    "description": "The transformation function of the procedure",
    "properties": {
      "type": {
        "description": "The id or class name of the procedureFunction type. One of 'ProcedureFunction', 'HecRasProcedureFunction', 'HecRas'",
        "type": "string"
      },
      "parameters": {
        "description": "list of function parameter values",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "type": "object"
          }
        ]
      },
      "initial_states": {
        "description": "list of function initial state values",
        "anyOf": [
          {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          {
            "type": "object"
          }
        ]
      },
      "boundaries": {
        "description": "object for mapping boundary conditions with node variable tuples. keys must be boundary condition names and values should be NodeVariableIdTuples",
        "type": "object"
      },
      "outputs": {
          "description": "object for mapping procedure outputs with node variable tuples. Keys must be output names and values must be NodeVariableIdTuples",
          "type": "object"
      }
    },
    "required": [
      "type",
      "boundaries",
      "outputs"
    ],
    "$defs": {
      "NodeVariableIdTuple": {
        "description": "first element is node id, second element is variable id",
        "type": "array",
        "minItems": 2,
        "maxItems": 3,
        "items": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    } 
}

  